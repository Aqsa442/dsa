import java.util.*;

public class Main {
    public static void main(String[] args) {
        Graph graph = createSampleGraph();
        int sourceNode = 0;  // Change this to your source node
        compareAlgorithms(graph, sourceNode);
    }

    public static Graph createSampleGraph() {
        Graph graph = new Graph();
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 1);
        graph.addEdge(2, 1, 2);
        graph.addEdge(2, 3, 5);
        graph.addEdge(1, 3, 1);
        graph.addEdge(3, 4, 3);
        return graph;
    }

    public static void compareAlgorithms(Graph graph, int source) {
        long startTime = System.nanoTime();
        Map<Integer, Double> dijkstraDistances = graph.dijkstra(source);
        long endTime = System.nanoTime();
        double dijkstraTime = (endTime - startTime) / 1e9;
        System.out.println("Dijkstra's Algorithm: " + dijkstraTime + " seconds");

        startTime = System.nanoTime();
        Map<Integer, Double> bellmanFordDistances = graph.bellmanFord(source);
        endTime = System.nanoTime();
        double bellmanFordTime = (endTime - startTime) / 1e9;
        System.out.println("Bellman-Ford Algorithm: " + bellmanFordTime + " seconds");
    }
}

class Graph {
    private Map<Integer, List<Edge>> graph = new HashMap<>();

    public void addEdge(int u, int v, double weight) {
        if (!graph.containsKey(u)) {
            graph.put(u, new ArrayList<>());
        }
        graph.get(u).add(new Edge(v, weight));
    }

    public Map<Integer, Double> dijkstra(int source) {
        Map<Integer, Double> distances = new HashMap<>();
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingDouble(node -> node.distance));

        for (Integer node : graph.keySet()) {
            distances.put(node, Double.POSITIVE_INFINITY);
        }
        distances.put(source, 0.0);
        pq.add(new Node(source, 0.0));

        while (!pq.isEmpty()) {
            Node current = pq.poll();
            int u = current.vertex;
            double currentDistance = current.distance;

            if (currentDistance > distances.get(u)) {
                continue;
            }

            for (Edge neighbor : graph.getOrDefault(u, Collections.emptyList())) {
                int v = neighbor.vertex;
                double weight = neighbor.weight;
                double distance = currentDistance + weight;

                if (distance < distances.getOrDefault(v, Double.POSITIVE_INFINITY)) {
                    distances.put(v, distance);
                    pq.add(new Node(v, distance));
                }
            }
        }

        return distances;
    }

    public Map<Integer, Double> bellmanFord(int source) {
        Map<Integer, Double> distances = new HashMap<>();
        for (Integer node : graph.keySet()) {
            distances.put(node, Double.POSITIVE_INFINITY);
        }
        distances.put(source, 0.0);

        int numVertices = graph.size();
        for (int i = 0; i < numVertices - 1; i++) {
            for (Integer u : graph.keySet()) {
                if (!distances.containsKey(u)) {
                    continue;
                }
                for (Edge neighbor : graph.getOrDefault(u, Collections.emptyList())) {
                    int v = neighbor.vertex;
                    double weight = neighbor.weight;
                    double newDistance = distances.get(u) + weight;
                    if (newDistance < distances.getOrDefault(v, Double.POSITIVE_INFINITY)) {
                        distances.put(v, newDistance);
                    }
                }
            }
        }

        // Check for negative-weight cycles
        for (Integer u : graph.keySet()) {
            for (Edge neighbor : graph.getOrDefault(u, Collections.emptyList())) {
                int v = neighbor.vertex;
                double weight = neighbor.weight;
                if (distances.containsKey(u) && distances.get(u) + weight < distances.get(v)) {
                    throw new RuntimeException("Graph contains a negative-weight cycle");
                }
            }
        }

        return distances;
    }

    private static class Node {
        int vertex;
        double distance;

        Node(int vertex, double distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
    }

    private static class Edge {
        int vertex;
        double weight;

        Edge(int vertex, double weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }
}
